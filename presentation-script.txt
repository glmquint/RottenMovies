[Title]
hi everyone!
our project is called Rotten Movies.
It takes inspiration from Rotten Tomatoes

---

[Application Highlight]
For those that don't know it, it's a platform where users can read and write reviews about the latest movies.

So, our application should allow unregistered users to browse movies and see their details, like plot, genre, cast.. and read all the associated reviews.

Those reviews come from other registered users or top critic reviewers and the aggregated general rating is kept separated between these two groups, in order to highlight possible alignments or disagreements between top critics and the audience.

Registered users can "follow" a top critic reviewer that they find interesting to keep track with their recent updates: this is because all recent reviews written by followed top critic appear in a feed timeline of a registered user.

---

[Actors and main supported functionalities]
This is the general use case diagram.

It is a simplifyied version: the final one that we'll present at the exam may include some additional use case that we didn't include here for readability, but all major use cases of the application are already present.

We can clearly see that we have 4 main actors, 2 of which are derived from a common abstract parent class.

Those are:
- the unregistered user
	- that can only browse movies and read reviews
	- and hopefully may register or login to the platform so that it becomes a..
- registered user
	- that can also leave reviews of a selected movie 
	- and follow top critic reviewers, so that it can see their recent reviews in its timeline.
- We also have a top critic account that is a special type of registered user 
	- whose reviews get highlighted.
	- It can also be followed by normal users but it can't follow back other users nor top critics.
	- Here we added a simple analytic for top critic users about their follower count.
- Finally we have an admin user
	- whose job consists in adding, removing and modifying movies and their details.
	- It can also ban users or eliminate reviews they find inappropriate.
	- They're responsible for creating new top critic accounts for verified reviewers that requested it.
	- They also have access to some global analytic for the application: like the list of the most active accounts

---

[Dataset Description]
Our dataset merges information from 3 different primary sources:
- first one is IMDB for everything related to movies and their cast,
- then we tried to overlap it with reviews found on Rotten Tomatoes,
- finally users informations have been randomly generated starting from usernames found in the reviews.

Volume exceeds the 250MB, excluding the generated user information, and with the different data sources we tried to comply to the variety requirement of the assignment.

---

[UML Class Diagram]
This's the preliminary UML Class Diagram, where we highlighted the most important fields for each class and their relationships with each other.

We can also see the abstract classes from which are derived the concrete implementations that will be used.

---

[Requirements and Entities of Document DB]
Here we can see the 2 main collections used in the document db.

We implemented document embedding for the cast and reviews for each movie

And for each user we have document linking for their reviewed movies

We also implemented a redundancy for the last 3 reviews of a user, that are directly emebedded whithin its document.

This is to reduce database computational load each time a user wants to read its recent reviews, which is much more likely to happen instead of retrieving all of them.

We also present some interesting queries that can be performed on the docuemnt db:
- for each genre or each year we can retrieve the most positive or negative reviewed movie
- or, as said previously, the movies with the most aligned or disagreements between top critics and audiance
- and also, for the administrator, the list of most active users in terms of reviews

---

[Requirements and Entities of Graph DB]
In the graph DB we have decided to have three entities: User, Top Critic and Movie. 

Every registered user is linked to the movies that they have reviewed, the link contains the raiting and a preview of the entire review

In addition each normal user is connected to the top critics that they follow to keep track with their thinking.

We also present some interesting queries that can be performed on the graph db:
- find the most followed top critics
- find the last reviews of all top critics followed by a particular user to build their feed
- suggesting a not already followed top critics based upon the affinity calculated by confronting ratings on movies revied by both

---

[Software architecture preliminary idea]
Our idea for the implementation of the software is to use Python for data scraping and cleaning and to use Java to create the application logic. 

The DBMS we intent to use for this project are mongoDB and Neo4j

and here are other tools used during the initial stage of development